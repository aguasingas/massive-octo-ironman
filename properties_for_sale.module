<?php
/**
 * @file
 * Code for the Properties for sale feature.
 */

include_once 'properties_for_sale.features.inc';

function properties_for_sale_block_info() {
  // This example comes from node.module.
  $blocks['properties_for_sale'] = array(
    'info' => t('Properties for sale'),
  );

  return $blocks;
}

function properties_for_sale_block_view($delta = '') {
  // This example is adapted from node.module.
  $block = array();

  switch ($delta) {
    case 'properties_for_sale':
      $block['subject'] = t('Properties for sale');
      $block['content'] = properties_for_sale_block_content();

      break;

  }
  return $block;
}
function properties_for_sale_properties_dropdown_form_callback($form, $form_state) {
//  $text = $form_state['values']['html_command_example'];

  $nid = $form_state['values']['select'];

  $text = drupal_render(properties_for_sale_block_content($nid));

  $commands = array();
  $commands[] = ajax_command_html('#block-properties-for-sale-properties-for-sale', $text);
//  $commands[] = ajax_command_replace("#html_status", "<div id='html_status'>Updated html_command_example with text=$text;  " . date('r') . "</div>");
  return array('#type' => 'ajax', '#commands' => $commands);
}

function properties_for_sale_properties_dropdown_form($form, $form_state, $options){
  $form = array();
  $form['select'] = array(
    '#type' => 'select',
    '#options' => $options,
    '#ajax' => array(
      'callback' => 'properties_for_sale_properties_dropdown_form_callback',
    ),
  );
  return $form;
}

function properties_for_sale_block_content($nid = 0) {
  //@todo: check if user is related to this property.
  // this block will be in user/uid/etc/etc
  $uid = arg(1);
  $account = user_load($uid);
  $profiles = profile2_load_by_user($account);
  if (isset($profiles['buyer'])) {
    $items = field_get_items('profile2',$profiles['buyer'],'field_seller_properties_relation');
    if ($items) {
      $nids = array();
      foreach ($items as $item) {
        $nids[$item['target_id']] = $item['target_id'];
      }
      $nodes = entity_load('node', $nids);
      $options = array();
      foreach ($nodes as $node) {
        $options[$node->nid] = $node->title;
      }
    }
  }

  // If we're loading via ajax, we'll have specified a nid.
  // @todo: add ajax behavior according to: https://api.drupal.org/api/drupal/includes!ajax.inc/group/ajax/7 and examples module.
  if ($nid == 0) {
    $nid = current($nids);
  }

  $form = drupal_get_form('properties_for_sale_properties_dropdown_form', $options);
  $rendered_form = drupal_render($form);

  if ($nid) {
    $node = node_load($nid);
  }
  else {
    return '';
  }
  $statistics = statistics_get($nid);
  $flag = flag_get_counts('node', $nid);
  // Offers made: webform with:
  // title: Giv os dit bud
  // nid = 212
  // component id for original_nid => cid = 11
  $result =
  db_select('webform_submitted_data', 'data')
    ->fields('data')
    ->condition('nid', 212)
    ->condition('cid', 11)
    ->condition('data', $nid)
    ->execute();

  $n_offers = $result->rowCount();

  // Showings requested: webform Book en fremvisning
  // nid: 200
  // component id for original_nid => cid = 8
  $result =
    db_select('webform_submitted_data', 'data')
      ->fields('data')
      ->condition('nid', 200)
      ->condition('cid', 8)
      ->condition('data', $nid)
      ->execute();

  $n_showings = $result->rowCount();

  // Salgopstilling downloads: webform Documents.
  // nid: 1940
  // component id for original_nid => cid = 9
  $result =
    db_select('webform_submitted_data', 'data')
      ->fields('data')
      ->condition('nid', 1940)
      ->condition('cid', 9)
      ->condition('data', $nid)
      ->execute();

  $n_downloads = $result->rowCount();

  $stats = properties_for_sale_get_statistics_by_day($nid);
  // Social Sharing links: we're using the config for property links.
  // It outputs an array of links compatible with theme_links.
  $social_render = service_links_render($node, TRUE);
  $social_render[] = array(
    'title' => t('My property page'),
    'href' => 'node/' . $node->nid,
    'attributes' => array(
      'title' => t('My property page'),
      'class' => array(
        '0' => 'property-page',
      )
    )
  );
  $social = theme('links', array('links' => $social_render));

  $output = array(
    '#theme' => 'properties_for_sale',
    '#visits' => $statistics['totalcount'] ? $statistics['totalcount'] : 0,
    '#favorites' => isset($flag['favorite']) ? $flag['favorite'] : 0,
    '#offers' => $n_offers ? $n_offers : 0,
    '#showings' => $n_showings ? $n_showings : 0,
    '#downloads' => $n_downloads ? $n_downloads : 0,
    '#social' => $social,
    '#chart' => $stats,
    '#form' => $rendered_form,
  );

  return $output;
}

/**
 * Returns an array of intervals with beginning and end timestamps for every day.
 * @param int $ndays: number of days from today. Defaults to 7, a week.
 */
function _properties_for_sale_get_daily_timestamps($ndays = 7) {
  $date_format = "d-m-Y 00:00:00";
  $datestring = date($date_format, time());
  $this_morning_timestamp = strtotime($datestring);
  $intervals = array();
  // today, we got beginning of the interval, but no end.
  $intervals[]  = array(
    'from' => $this_morning_timestamp,
  );
  // ok, we've used one day: the last one, today.
  $ndays--;
  $timestamp = $this_morning_timestamp;

  for ($i = 0;$i < $ndays; $i++) {
    $prev_timestamp = $timestamp;
    $timestamp = $timestamp - (24 * 3600);
    $current = array(
      'from' => $timestamp,
      'to' => $prev_timestamp,
    );
    // since we're going backwards,
    // every new result goes in the first position, every time.
    array_unshift($intervals, $current);
  }

  return $intervals;
}

function properties_for_sale_get_statistics_by_day($nid = 0) {
  // Let's check if there are visits in general. If not, we can leave.
  $result = db_select('accesslog', 'a')
    ->fields('a')
    ->condition('path', 'node/' . $nid)
    ->execute();

  $n_visits = $result->rowCount();

//  if (!$n_visits) {
//    return 0;
//  }

  // Get the list of timestamp intervals
  // from today to the beginning of the week.
  $intervals = _properties_for_sale_get_daily_timestamps();

  // labels for the chart.
  $labels = array();
  // data for the chart.
  $data = array();
  // format we'll use for dates in labels
  $date_format_human = "M d";
  foreach($intervals as $interval) {
    $select =
      db_select('accesslog', 'a')
        ->fields('a')
        ->condition('path', 'node/' . $nid)
        ->condition('timestamp', $interval['from'], '>=');
    // Last day (today) has still not ended, so it has not 'to'.
    if (isset($interval['to'])) {
      $select->condition('timestamp', $interval['to'], '<');
    }
    $result = $select->execute();
    // we'll use the "from" timestamp as a key: the morning timestamp.
    $data[$interval['from']] = $result->rowCount();
    $labels[$interval['from']] = date($date_format_human, $interval['from']);

  }
  // Google chart definition.
  $chart = array(
    '#chart_id' => 'new_visits_chart',
    '#title' => chart_title(t('New visits'), '0000ff', 15),
    '#type' => CHART_TYPE_LINE,
    '#size' => chart_size(695, 200),
    '#adjust_resolution' => TRUE,
  );

  $chart['#data']['visits'] = $data;

  $chart['#data_colors'][] = '0000ff';

  // y axis, its range goes from 0 to the biggest item in data.
  $chart['#mixed_axis_labels'][CHART_AXIS_Y_LEFT][0][] = chart_mixed_axis_range_label(0, max($data));

  // labels (dates) for the x axis.
  foreach ($labels as $label) {
    $chart['#mixed_axis_labels'][CHART_AXIS_X_BOTTOM][1][] = chart_mixed_axis_label($label);
  }

  return  theme('chart', array('chart' => $chart));

}

/**
 * Implements hook_theme.
 */
function properties_for_sale_theme($existing, $type, $theme, $path) {
  return array(
    'properties_for_sale' => array(
      'variables' => array(
        'visits' => 0,
        'favorites' => 0,
        'offers' => 0,
        'showings' => 0,
        'downloads' => 0,
        'chart' => 0,
        'social' => '',
        'form' => '',
      ),
      'template' => 'properties-for-sale',
    ),
  );
}